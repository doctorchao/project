创建数据库连接 并引入到app.js
分别创建book title article 模型
配置路由
先爬取一本书 放入book集合中 并根据目录和文章链接 分别将其储存到title和article集合中


for if/each  map 等不能随便用 在async里面  因为await可能会进不去 或进去没有用

而且在里面不要用异步回调去取数据 可能出不来  或者也可以用promise封装一下
用for 或 for of

lsof -i:端口号 kill pid  结束端口进程

使用try catch 是因为用async await 无法捕捉错误
使用findById(id) 跟 使用mongoose.Types.ObjectId(id) 差不多

浮动造成的父元素高度塌陷 即脱标 父元素会忽略子元素所占的空间
解决
1, 父元素加 overflow: hidden;  不推荐使用
优点：使用简单。缺点：会将超出父元素范围的子元素裁剪掉
2, 外墙法：在受影响的父元素外下面加一个空的div  然后给这个  div 添加属性clear:both
优点：方便。缺点：没有撑起父元素高度，添加了一个毫无语义的元素，影响seo 性能
3, 内墙法：在受影响的父元素内加一个空的div 然后给这个  div 添加属性clear:both
优点：撑起了父元素高度。缺点：添加了一个毫无语义的html元素，影响seo 性能
4, 伪类：为受影响的父元素添加 ::after{content:'',display:block,clear:both}
推荐使用 伪类
5, display:flex  较高版本浏览器才支持 所以一般.不要用


jwt加密：
MD5 加密是非对称  不可逆的  加密完成无法解密到原来 
jwt是对称 可逆的


其实在MongoDB里面，find()和findOne()的用法是一样的，举个例子：
findOne({name:”mongo”})和find({name:”mongo”}).limit(1)其实是等效的。
它们的参数也是一样的，只不过find()和findOne()返回的不同而已。

第一个区别就是，findOne()会返回符合条件的第一个文档，而find()会返回所有符合条件的对象。
第二个区别是，findOne()返回的是一个对象，而find()返回的是一个数组，数组里面装着对象。
两者看起来好像差不多，但findOne()返回的值前端只需要用data.name就能获取到，但find()返回的值前端要用data[i].name来获取。

postman 不存在跨域
使用params传id 是直接在路由后面加上了/id  postman里params是传的query

添加图书
添加分类
往分类中添加图书
鉴权

res.data.trim() 去空格方法


setStates:{ ...states } 不用...states